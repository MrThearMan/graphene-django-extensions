# Generated by Django 5.1.1 on 2024-09-16 15:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="ForwardManyToMany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="ForwardManyToOne",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="ForwardOneToOne",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Example",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("name_en", models.CharField(max_length=255, null=True)),
                ("name_fi", models.CharField(max_length=255, null=True)),
                ("number", models.IntegerField()),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "example_state",
                    models.CharField(
                        choices=[("ACTIVE", "Active"), ("INACTIVE", "Inactive")],
                        max_length=255,
                    ),
                ),
                ("duration", models.DurationField()),
                ("symmetrical_field", models.ManyToManyField(to="app.example")),
                (
                    "forward_many_to_many_fields",
                    models.ManyToManyField(related_name="example_rels", to="app.forwardmanytomany"),
                ),
                (
                    "forward_many_to_one_field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="example_rels",
                        to="app.forwardmanytoone",
                    ),
                ),
                (
                    "forward_one_to_one_field",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="example_rel",
                        to="app.forwardonetoone",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReverseManyToMany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "example_fields",
                    models.ManyToManyField(related_name="reverse_many_to_many_rels", to="app.example"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReverseOneToMany",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "example_field",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reverse_one_to_many_rels",
                        to="app.example",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ReverseOneToOne",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                (
                    "example_field",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reverse_one_to_one_rel",
                        to="app.example",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="example",
            constraint=models.UniqueConstraint(
                fields=("name", "number"),
                name="unique_name",
                violation_error_message="Example unique violation message.",
            ),
        ),
        migrations.AddConstraint(
            model_name="example",
            constraint=models.CheckConstraint(
                **(
                    {
                        "check": models.Q(name__icontains="foo"),
                    }
                    if django.VERSION < (5, 1)
                    else {
                        "condition": models.Q(name__icontains="foo"),
                    }
                ),
                name="check_example",
                violation_error_message="Example constraint violation message.",
            ),
        ),
    ]
